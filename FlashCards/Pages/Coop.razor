@page "/gamemodes/coop"
@implements IDisposable
@using FlashCards.Model
@inject User _user
@inject Data data

<PageTitle>Co-op</PageTitle>

<RadzenRow>
    <RadzenStack Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="height: 80vh; width: 100%; max-width: 800px; overflow: hidden;">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-background-color-success rz-p-12" style="text-align: center; vertical-align:central">
            <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" Class="rz-color-white rz-mb-0">@question</RadzenText>
        </RadzenCard>
        <RadzenCard Class="rz-shadow-0 rz-p-12" Style="text-align:center; height:100%">
            @if (countdown)
            {
                <strong style="font-size:500%">@countdownText</strong>
            }
            else
            {
                <RadzenRow Gap="4%" Style="width:100%; align-content:center; height:48%; margin-bottom:4%">
                    <RadzenButton Style="width:48%; height:100%" Text="@GetRandomAnswer()" ButtonStyle="ButtonStyle.Success" />
                    <RadzenButton Style="width:48%; height:100%" Text="@GetRandomAnswer()" ButtonStyle="ButtonStyle.Primary" />
                </RadzenRow>
                <RadzenRow Gap="4%" Style="width:100%; align-content:center; height:48%">
                    <RadzenButton Style="width:48%; height:100%" Text="@GetRandomAnswer()" ButtonStyle="ButtonStyle.Danger" />
                    <RadzenButton Style="width:48%; height:100%" Text="@GetRandomAnswer()" ButtonStyle="ButtonStyle.Warning" />
                </RadzenRow>
            }
        </RadzenCard>
    </RadzenStack>
</RadzenRow>

@code{
    bool countdown = true;
    System.Timers.Timer? timer = new();
    private int counter = 4;
    string countdownText = "Ready?";
    string question = "";
    string rightAnswer = "";
    List<string> answers = new();

    protected override void OnInitialized()
    {
        StartTimer();
        base.OnInitialized();
    }

    string GetRandomAnswer()
    {
        Random rndm = new();
        string answer = answers[rndm.Next(0, answers.Count())];
        answers.Remove(answer);
        return answer;
    }

    void GetData()
    {
        question = "What of the following choices represents an IPv4 adress?";
        rightAnswer = "192.168.178.1";
        string wrongAnswer1 = "A2D4A6B7";
        string wrongAnswer2 = "999.999.999.999";
        string wrongAnswer3 = "300.ABCD.1234.FFF";
        answers = new List<string> { rightAnswer, wrongAnswer1, wrongAnswer2, wrongAnswer3 };
    }

    void StartTimer()
    {
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += CountDownTimer;
        timer.Enabled = true;
    }

    void CountDownTimer(Object? source, System.Timers.ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
            if (counter == 0)
            {
                countdownText = "Go!";
            }
            else
            {
                countdownText = counter.ToString();
            }
        }
        else
        {
            countdown = false;
            GetData();
            timer.Enabled = false;
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        data.UserList.Where(x => x.UserName == _user.UserName).First().Lobby = 0;
        data.UserList.Where(x => x.UserName == _user.UserName).First().Game = "";
    }
}